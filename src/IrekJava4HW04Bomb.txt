package com.geekbrains.game;

import com.badlogic.gdx.ApplicationAdapter;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Input;
import com.badlogic.gdx.assets.loaders.FileHandleResolver;
import com.badlogic.gdx.assets.loaders.resolvers.InternalFileHandleResolver;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.BitmapFont;
import com.badlogic.gdx.graphics.g2d.ParticleEmitter;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.g2d.TextureAtlas;
import com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator;
import com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGeneratorLoader;
import com.badlogic.gdx.graphics.g2d.freetype.FreetypeFontLoader;
import com.badlogic.gdx.graphics.g3d.particles.values.MeshSpawnShapeValue;
import com.badlogic.gdx.math.MathUtils;
import com.badlogic.gdx.math.Rectangle;

import java.util.concurrent.atomic.AtomicInteger;

public class BomberGame extends ApplicationAdapter {
    private SpriteBatch batch;
    private Map map;
    private Bomberman player;
    private Bomb bomb;
    private AnimationEmitter animationEmitter;
    private TextureAtlas atlas;
    private BitmapFont font32;

    // 1. Разобраться с кодом
    // 2. Реализовать бомбы(без анимации), ставим бомбу на клетку(по пробелу),
    // через 2 секунды после установики бомба исчезает и запускается
    // анимация взрыва. Бомба ТОЛЬКО ОДНА, делать емиттер не надо
    // Замечание: ставим бомбу на клетку в которой находимся, даже если
    // мы просто через нее идем

    @Override
    public void create() {
        batch = new SpriteBatch();
        atlas = new TextureAtlas( "game.pack");
        map = new Map(atlas);
        player = new Bomberman(map, atlas);
        bomb = new Bomb(map, atlas, false, 40.0f, 40.0f);
        animationEmitter = new AnimationEmitter(atlas);

        FreeTypeFontGenerator.FreeTypeFontParameter fontParameter = new FreeTypeFontGenerator.FreeTypeFontParameter();
        fontParameter.size = 32;
        fontParameter.color = Color.WHITE;
        fontParameter.borderWidth = 1;
        fontParameter.borderColor = Color.BLACK;
        fontParameter.shadowOffsetX = 3;
        fontParameter.shadowOffsetY = 3;
        fontParameter.shadowColor = Color.BLACK;
        FreeTypeFontGenerator generator = new FreeTypeFontGenerator(Gdx.files.internal("gomarice.ttf"));
        font32 = generator.generateFont(fontParameter);
        generator.dispose();
    }

    @Override
    public void render() {
        float dt = Gdx.graphics.getDeltaTime();
        update(dt);
        Gdx.gl.glClearColor(1, 1, 1, 1);
        Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
        batch.begin();
        map.render(batch);
        player.render(batch);
        bomb.render(batch);
        animationEmitter.render(batch);
        font32.draw(batch, "Score: 1000", 20, 700);
        batch.end();
    }

    public void update(float dt) {
        map.update(dt);
        player.update(dt);
        animationEmitter.update(dt);
        bomb.update(dt);
//        if (Gdx.input.justTouched()) {
//            animationEmitter.createAnimation(Gdx.input.getX(), 720 - Gdx.input.getY(), MathUtils.random(1.0f, 10.0f), AnimationEmitter.AnimationType.EXPLOSION);
//        }
    }

    @Override
    public void dispose() {
        batch.dispose();
        atlas.dispose();
    }
}

************************************************
public class Bomb {
    public enum State {
        INVISIBLE(0), VISIBLE(1);
        private int animationIndex;
        State(int animationIndex) {
            this.animationIndex = animationIndex;
        }
    }

    private Map map;
    private Animation[] animations;
    private Vector2 position;
    private State currentState;
    private TextureAtlas atlas;
    private TextureRegion textureBomb;
    private float time;
    private float minTime;
    private boolean active;
    private boolean infinity;
    private AnimationEmitter animationEmitter;



    public Bomb(Map map, TextureAtlas atlas, boolean isActive, float xPos, float yPos) {
        atlas = new TextureAtlas("game.pack");
        this.map = map;
        this.position = new Vector2(40.0f, 40.0f);
        this.textureBomb = atlas.findRegion("bomb");
        this.time = 2.0f;
        this.minTime = 0.0f;
        this.active = isActive;
        this.infinity = false;

/*
        this.animations = new Animation[Bomb.State.values().length];
        for (int i = 0; i < Bomb.State.values().length; i++) {
            this.animations[i] = new Animation();
            this.animations[i].activate(0, 0, 1, new TextureRegion(atlas.findRegion("bomb")).split(Rules.CELL_SIZE, Rules.CELL_SIZE)[i], 0.1f, true);
        }

        this.currentState = Bomb.State.INVISIBLE;
       */
    }

    public void render(SpriteBatch batch) {
        if (active = true)
            batch.draw(textureBomb, position.x - Rules.CELL_HALF_SIZE, position.y - Rules.CELL_HALF_SIZE);

//        batch.draw(animations[currentState.animationIndex].getCurrentRegion(), position.x - Rules.CELL_HALF_SIZE, position.y - Rules.CELL_HALF_SIZE);
    }

    public void putBomb(float xPosition, float yPosition) {
        position.x = xPosition;
        position.y = yPosition;
        this.active = true;

    }

    public void update(float dt) {
        if (active == true){
        time -= dt;
        if (time <= minTime) {
            if (!infinity) {
                animationEmitter.createAnimation(Gdx.input.getX(), 720 - Gdx.input.getY(), 1.0f, AnimationEmitter.AnimationType.EXPLOSION);
            }
                active = false;
            } else {
                time = 2.0f;
            }
        }
    }

}
*****************************************
unfortunaly I cant see bomb on screen :^/
*****************************************
public class Bomberman {
    public enum State {
        IDLE(0), MOVE(1);

        private int animationIndex;

        State(int animationIndex) {
            this.animationIndex = animationIndex;
        }
    }

    private Map map;
    private Animation[] animations;
    private Vector2 position;
    private Vector2 velocity;
    private float pathCounter;
    private float speed;
    private State currentState;
    private TextureAtlas atlas;
    public Bomb bomb;

    public int getCellX() {
        return (int) (position.x / Rules.CELL_SIZE);
    }

    public int getCellY() {
        return (int) (position.y / Rules.CELL_SIZE);
    }

    public Bomberman(Map map, TextureAtlas atlas) {
        this.map = map;
        this.position = new Vector2(120.0f, 120.0f);
        this.velocity = new Vector2(0.0f, 0.0f);
        this.speed = 200.0f;
        this.pathCounter = -1;
        this.animations = new Animation[State.values().length];
        for (int i = 0; i < State.values().length; i++) {
            this.animations[i] = new Animation();
            this.animations[i].activate(0, 0, 1, new TextureRegion(atlas.findRegion("bomberA")).split(Rules.CELL_SIZE, Rules.CELL_SIZE)[i], 0.1f, true);
        }
        this.currentState = State.IDLE;
    }

    public void render(SpriteBatch batch) {
        batch.draw(animations[currentState.animationIndex].getCurrentRegion(), position.x - Rules.CELL_HALF_SIZE, position.y - Rules.CELL_HALF_SIZE);
    }

    public void update(float dt) {
        animations[currentState.animationIndex].update(dt);

        if (Gdx.input.isKeyPressed(Input.Keys.D) && pathCounter < 0.0f && map.isCellEmpty(getCellX() + 1, getCellY())) {
            velocity.set(speed, 0.0f);
            pathCounter = 0.1f;
            currentState = State.MOVE;
        }
        if (Gdx.input.isKeyPressed(Input.Keys.A) && pathCounter < 0.0f && map.isCellEmpty(getCellX() - 1, getCellY())) {
            velocity.set(-speed, 0.0f);
            pathCounter = 0.1f;
            currentState = State.MOVE;
        }
        if (Gdx.input.isKeyPressed(Input.Keys.W) && pathCounter < 0.0f && map.isCellEmpty(getCellX(), getCellY() + 1)) {
            velocity.set(0.0f, speed);
            pathCounter = 0.1f;
            currentState = State.MOVE;
        }
        if (Gdx.input.isKeyPressed(Input.Keys.S) && pathCounter < 0.0f && map.isCellEmpty(getCellX(), getCellY() - 1)) {
            velocity.set(0.0f, -speed);
            pathCounter = 0.1f;
            currentState = State.MOVE;
        }
        if (Gdx.input.isKeyJustPressed(Input.Keys.SPACE)) {
            bomb = new Bomb(map, atlas, true,getCellX()*Rules.CELL_SIZE,getCellY()* Rules.CELL_SIZE );
        }

        if (pathCounter > 0.0f) {
            position.mulAdd(velocity, dt);
            pathCounter += velocity.len() * dt;
            if (pathCounter >= Rules.CELL_SIZE) {
                position.x = getCellX() * Rules.CELL_SIZE + Rules.CELL_HALF_SIZE;
                position.y = getCellY() * Rules.CELL_SIZE + Rules.CELL_HALF_SIZE;
                pathCounter = -1.0f;
                currentState = State.IDLE;
            }
        }
    }
}
