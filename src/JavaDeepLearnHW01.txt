/* Java.Углубленное изучение. HomeWork 01
* @author Irek Nabiullin
* @version dated Sept 23, 2018
* @link on my github:
* https://github.com/IrekNabiullin
*
* Task 1. Ответьте письменно на вопросы:
* 	 Как организовать клиент-серверное взаимодействие?
*    Как и в каком виде передавать файлы?
*    Как пересылать большие файлы?
*    Как пересылать служебные команды?
*    Что хранить в базе данных?
*    Как передавать структуру каталогов/файлов?
*    Какую библиотеку использовать для сетевого взаимодействия: java.io, java.nio, Netty?
* 
*/

// Solution.
Вопрос 1. Как организовать клиент-серверное взаимодействие:
Что такое взаимодействие Клиент-сервер? Это взаимодействие двух программных продуктов между собой, 
один из которых выступает в качестве сервера, а другой соответственно в качестве клиента. 
Клиент посылает запрос, а сервер отвечает ему. 
А что такое клиент и что такое сервер? 
Клиент это программная оболочка, с которой взаимодействует  пользователь. 
А сервер это та часть программного обеспечения, которая выполняет все основные функции (хранит данные, выполняет расчеты).
Другими словами, пользователь видит программу, которая, допустим, работает с какими-то данными, которые хранятся в базе данных, 
тем самым он видит всего лишь интерфейс этой программы, а все самое основное выполняет сервер, 
и процесс когда пользователь оперирует данными через интерфейс программы, при котором клиентская часть взаимодействует с серверной,
и называется Клиент-Сервер. 
В качестве клиента не обязательно должен выступать интерфейс, который видит пользователь, 
в некоторых случаях в качестве клиента может выступать и просто программа или скрипт, 
например, данные на сайте хранятся в базе данных, соответственно скрипты, которые будут обращаться к базе данных 
и будут являться клиентом в данном случае, хотя и сами эти скрипты являются сервером для клиентской часть сайта (интерфейса).

Клиент-серверная архитектура наиболее часто используется для создания корпоративных баз данных,
в которых информация не только хранится, но и периодически поддается обработке различными методами. 
Именно база данных является главным элементом любой корпоративной информационной системы, 
а на сервере располагается ядро этой базы. Так, на сервере происходят наиболее сложные операции, 
касающиеся ввода, хранения, обработки и модификации данных. 
Когда пользователь (клиент) обращается к базе данных (серверу), происходит обработка запроса: 
непосредственно обращение к базе данных и возврат ответа (результата обработки). 
Результат обработки – это сообщение сети об успешном проведении операции или ошибке. 
Серверные компьютеры могут обрабатывать одновременно обращение нескольких клиентов к одному и тому же файлу.

В нашем проекте мы организуем удаленное хранилище файлов в некоторой структуре (базе данных).
К этому хранилищу можно будет подключаться из разных мест по разным протоколам
и можно получить удаленно хранящйся файл или объект.
Выполнять над ними CRAUD-операции (создание, удаление, обновление,  поиск определнных данных ).

В любой сети (даже одноранговой), построенной на современных сетевых технологиях, 
присутствуют элементы клиент-серверного взаимодействия, чаще всего на основе двухзвенной архитектуры. 
Двухзвенной (two-tier, 2-tier) она называется из-за необходимости распределения трех базовых компонентов между двумя узлами (клиентом и сервером).

Еще одна тенденция в клиент-серверных технологиях связана со все большим использованием распределенных вычислений. 
Они реализуются на основе модели сервера приложений, где сетевое приложение разделено на две и более частей, 
каждая из которых может выполняться на отдельном компьютере. 
Выделенные части приложения взаимодействуют друг с другом, обмениваясь сообщениями в заранее согласованном формате. 
В этом случае двухзвенная клиент-серверная архитектура становится трехзвенной (three-tier, 3-tier).

Двухзвенная архитектура проще, так как все запросы обслуживаются одним сервером, 
поэтому в нашемпроекте мы будем использовать ее.

Мы будем работать на основе спецификации JCR 
а также JSR-170 и JSR-283

Для организации хранилища мы используем программу Apache Jackrabbit.

В ходе проекта мы организуем синхронизацию файлов и папок между клиентом и сервером.
Напишем умного клиента, который с удаленного сервера получает список файлов,
выстриавает в выбранной пользователем папке структуру, которая хранится на удаленном сервере.
Мы считаем структуру каталогов и файлов с сервера.
В папке из настроек клиентского приложения нам останется циклом пробежаться и воссоздать всю эту структуру.
Написать алгоритм, который позволяет вычислять дельту между серверным состоянием файлов и клиентским.

Вопрос 2. Как и в каком виде передавать файлы?

На сегодняшний день выделяют три основные технологии передачи данных:
Файл-сервер
Клиент-сервер
Терминал-сервер

Файл-серверная технология применима исключительно при работе с небольшими объемами данных, 
поскольку если объем данных будет велик, то это грозит существенными задержками работы сети.

Технология терминал-сервер принципиально отличается тем, что конечному пользователю по сети 
передаются не сами интересующие его данных, а изображение этих данных. 
Пользователь подключается к так называемому "терминальному серверу" и 
сервер предоставляет пользователю по сети только изображение Рабочего стола с запущенными программами с заданной частотой.

При использовании клиент-серверной технологии, на самом сервере, содержащим базу данных, 
функционирует некоторое программное обеспечение, которое называется "Сервером баз данных" или "Сервером БД". 
Благодаря технологии сервер БД получает запрос на формирование отчета, сам фильтрует данные, 
при необходимости рассчитывает и пользователю по сети отдается уже готовый результат.
Таким образом, архитектура клиент-сервер адаптирована для работы с большими объемами данных - 
сеть нагружается меньше, требования к пользовательским компьютерам, с точки зрения производительности, минимизируется. 

Передача файлов будет осуществляться по технологии, позволяющей минимизировать нагрузку на сеть и максимально сокращать время передачи.


Вопрос 3. Как пересылать большие файлы?
Большие файлы придется разрезать на части. При необходимости архивировать их, распаковывать и склеивать в один файл на стороне клиента.

Вопрос 4. Как пересылать служебные команды?
Для персылки служебных команд можно воспользоваться технолгией, котрую мы проходили при написании чата. Когда отправляется команда, перед ней ставится слеш.

Вопрос 5. Что хранить в базе данных?
В базе данных хранить требуемую информацию (документы, фото, иные данные)

Вопрос 6. Как передавать структуру каталогов/файлов?
Использьовтаь технологию WebDAV


Вопрос 7. Какую библиотеку использовать для сетевого взаимодействия: java.io, java.nio, Netty?
Погуглив увидел интересную статью на Хабре, котрая начиналасть так:
"Здравствуйте. Я являюсь главным разработчиком крупнейшего в СНГ сервера Minecraft (не буду рекламировать, кому надо, те знают). 
Уже почти год мы пишем свою реализацию сервера, рассчитанную на больше чем 40 человек (мы хотим видеть цифру в 500 хотя бы). 
Пока всё было удачно, но последнее время система начала упираться в то, что из-за не самой удачной реализации сети 
(1 поток на ввод, 1 на вывод + 1 на обработку), при 300 игроках онлайн работает более 980 потоков (+ системные), 
что в сочетании с производительностью дефолтного io Явы даёт огромное падение производительности, 
и уже при 100 игроках сервер в основном занимается тем, что пишет/читает в/из сети.
Поэтому я решила переходить на NIO. В руки совершенно случайно попала библиотека Netty, структура которой показалась просто идеально 
подходящей для того, чтобы встроить её в уже готовое работающее решение. ""

Поэтому, выбор очевиден - Netty!