// Домашнее задание Lesson8 Ирек Набиуллин
    // С кодом разобрался
    // Сменау ника в БД осуществил по запросу /changenick newNick
    // Использовать запрос вида:
    // stmt.executeUpdate("UPDATE students SET score = 100 WHERE id = 4;");
	//
	// внес изменения в ClientHandler и SQLHandler:
	
	public class ClientHandler {
    private Server server;
    private Socket socket;
    private DataInputStream in;
    private DataOutputStream out;
    private String nickname;

    public String getNickname() {
        return nickname;
    }

    public ClientHandler(Server server, Socket socket) {
        try {
            this.server = server;
            this.socket = socket;
            System.out.println(socket.getInetAddress().toString());
            this.in = new DataInputStream(socket.getInputStream());
            this.out = new DataOutputStream(socket.getOutputStream());
            new Thread(() -> {
                try {
                    while (true) {
                        String str = in.readUTF();
                        // /auth login1 pass1
                        if (str.startsWith("/auth ")) {
                            String[] tokens = str.split("\\s");
                            if (tokens.length == 3) {
                                String nickFromDB = SQLHandler.getNickByLoginAndPassword(tokens[1], tokens[2]);
                                if (nickFromDB != null) {
                                    if (!server.isNickBusy(nickFromDB)) {
                                        sendMsg("/authok " + nickFromDB);
                                        nickname = nickFromDB;
                                        server.subcribe(this);
                                        break;
                                    } else {
                                        sendMsg("Учетная запись уже используется");
                                    }
                                } else {
                                    sendMsg("Неверный логин/пароль");
                                }
                            } else {
                                sendMsg("Неверный формат данных авторизации");
                            }
                        }
                        if (str.startsWith("/registration ")) {
                            String[] tokens = str.split("\\s");
                            // /registration login5 pass5 nick5
                            if (tokens.length == 4) {
                                if (SQLHandler.tryToRegister(tokens[1], tokens[2], tokens[3])) {
                                    sendMsg("Регистрация прошла успешно");
                                } else {
                                    sendMsg("Введены некорректные логин/пароль/ник");
                                }
                            }
                        }
                    }
                    while (true) {
                        String str = in.readUTF();
                        System.out.println("Сообщение от клиента " + nickname + ": " + str);
                        if (!str.startsWith("/")) {
                            server.broadcastMsg(nickname + ": " + str);
                        } else {
                            if (str.equals("/end")) {
                                break;
                            }
                            if (str.startsWith("/w ")) {
                                // /w nick2 hello java
                                String[] tokens = str.split("\\s", 3);
                                if (tokens.length == 3) {
                                    server.personalMsg(this, tokens[1], tokens[2]);
                                } else {
                                    sendMsg("Неверный формат личного сообщения");
                                }
                            }
                            //обрабатываем запрос на смену ника:
                            if (str.startsWith("/changenick ")) {
                                // /changenick newnick
                                String[] tokens = str.split("\\s", 2);
                                if (tokens.length == 2) {
                                    String loginFromDB = SQLHandler.getLoginByNickname(this.getNickname()); //опрелеяем логин клиента
                                    System.out.println("nick: " + this.getNickname());  // в консоль для отладки
                                    System.out.println("login: " + loginFromDB);        // в консоль для отладки
                                    System.out.println("new nick: " + tokens[1]);       // в консоль для отладки
                                    if (SQLHandler.tryToChangeNick(loginFromDB, tokens[1])) { // меняем ник у данного логина в базе данных
                                        server.broadcastMsg(nickname + " has changed nickname to: " + tokens[1]); // сообщаем всем о замене ника
                                        this.nickname = tokens[1];                      // меняем ник у данного логина на сервере
                                    } else {
                                        sendMsg("Ошибка! Ник не должен содержать пробелы и служебные символы.");
                                    }
                                }
                            }
                        }
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                } finally {
                    try {
                        in.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                    try {
                        out.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                    try {
                        socket.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                    server.unsubscribe(ClientHandler.this);
                }
            }).start();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void sendMsg(String msg) {
        try {
            out.writeUTF(msg);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}


//********************
package com.geekbrains.server;

import java.sql.*;

public class SQLHandler {
    private static Connection connection;
    private static Statement stmt;

    public static void connect() {
        try {
            Class.forName("org.sqlite.JDBC");
            connection = DriverManager.getConnection("jdbc:sqlite:database.db");
            stmt = connection.createStatement();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static String getNickByLoginAndPassword(String login, String password) {
        try {
            ResultSet rs = stmt.executeQuery("SELECT nickname FROM users WHERE login = '" + login + "' AND password = '" + password + "';");
            if(rs.next()) {
                return rs.getString(1);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    public static boolean tryToRegister(String login, String password, String nickname) {
        try {
            stmt.executeUpdate(String.format("INSERT INTO users (login, password, nickname) VALUES ('%s', '%s', '%s');", login, password, nickname));
            return true;
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }
	

    // пытаемся получить логин по нику клиента:
    public static String getLoginByNickname(String nickname) {
        try {
            ResultSet res = stmt.executeQuery("SELECT login FROM users WHERE nickname = '" + nickname + "';");
            if(res.next()) {
                System.out.println(res.getString(1)); // в консоль для отладки
                return res.getString(1);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }
    // пытаемся изменить ник клиента по логину
    public static boolean tryToChangeNick(String clientLogin, String newNick) {
        try {
            stmt.executeUpdate("UPDATE users SET nickname = '" + newNick + "' WHERE login = '" + clientLogin + "';");
            return true;
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

    public static void disconnect() {
        try {
            connection.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}


	